1、Java流分类

按照数据流的方向：输入流和输出流

按照处理数据单位：字节流和字符流

按照功能不同：节点流和处理流

------------------------------------------------------------------------------------------------------------------------
			字节流			字符流
输入流		InputStream 	Reader
输出流		OutputStream 	Writer

说明：字节流是最原始的一个流，读出来的数据都是0101这种最底层的数据表现形式，只不过它是按照字节读的，一个字节是8bit，读的时候一次性读取8bit；一个字符是两个字节，因此是16bit，一个汉字是两个字节，因此可以按照字节读取两次或者按照字符读取一次。
	  节点流：从一个特定的数据源读写数据，（比如：文件、内存、网络），只需要一根管道连接程序和数据源，因此这个管道就叫做节点流；
	  处理流：而处理流就是在节点流这个管道上包裹其他的流，对数据处理提供更加强大的功能。处理流可以有多层。
	  【可以把文件想象成水桶，而数据就是水桶中的水，程序读取文件可以想象为一根管道连接程序和文件，水从文件通过管道流到程序或从程序通过管道流到文件，这根管道就是流，单根的管道比较细，流的慢，可以节约用水，在单根管道上多套基层粗管子水就流的快了，加快了数据的处理速度，因此被称作处理流。】

-------------------------------------------------------------------------------------------------------------------------	  
2、节点流和处理流类型

	2-1 节点流类型

		类型			字符流			字节流

		文件 		FileReader    	FileInputStream
					FileWriter 		FileOutputStream

		数组  		CharArrayReader ByteArrayInputStream
					CharArrayWriter ByteArrayOutputStream

		字符串 		StringReader 	-------
					StringWriter    -------

		pipe（管道） PipedReader 	    PipedInputStream
				    PipedWriter    	PipedOutputStream

		说明：就是一根管道插在数据源上面

	2-2 处理流类型

		类型 		 		字符流  				字节流

		缓冲区				BufferedReader 		BufferedInputStream
		  					BufferedWriter 		BufferedOutputStream

		Filtering			FilterReader		FilterInputStream
							FilterWriter 		FilterOutputStream

		转换流 				InputStreamReader
							OutputStreamWriter

		对象输出流 			-------- 			ObjectInputStream
												ObjectOutputSteam

		基本类型	 			-------- 			DataInputStream
												DataOutputStream

		行号读入流 			LineNumberReader 	LineNumberInputStream

		推回输入流   		    PushbackReader  	PushbackInputStream

		打印流 				PrintWriter 		PrintStream

		说明：处理流是包在别的流上面的流，相当于包在别的管道上的管道

3、输入流学习

	任何输入流都是以一个字节（8bit）向程序中读取数据；

						| FileInputStream

						| PipedInputStream           --  LineNumberInputStream
													 |
						| FilterInputStream -------> | 	 DataInputStream
	InputStream------>								 |
						| ByteArrayInputStream		 |	 BufferedInputStream
													 |
						| SequenceInputStream		 |-- PushbackInputStream

						| StringBufferInputStream

						| ObjectInputStream
	
	InputStream的基本方法：

	1、int read() throws IOException //读取一个字节并以整数的形式返回(0~255)，如果返回-1表示已到输入流的末尾

	2、int read(byte[] buffer) throws IOException //读取一系列字节并存储到一个数组buffer，返回实际读取的字节数，末尾返回-1

	3、int read(byte[] buffer , int offset , int length) throws IOException //返回读取的length值，如果最后一个字节小于length，则返回真实值，末尾返回-1

	4、void close() throws IOException //关闭流释放内存资源

	5、long skip(long n) throws IOException //

	【总结：read()方法是一个字节一个字节的往外读，读取一个，处理一个。而read(byte[] buffer)这个方法则是一个缓冲区，先把桶里的水倒进缸子，用缸子喝】

4、输出流学习

	输出流是以一个字节（8bit）向外写数据进行输出

							| FileOutputStream

							| PipedOutputStream
	OutputStream--------->							|-----  DataOutputStream
							| FilterOutputStream--->|-----  BufferedOutputStream
													|-----  PrintStream

							| ByteArrayOutputStream

							| ObjectOutputStream

	OutputStream的基本方法：

	1、write(int b) throws IOException //向输出流中写入一个字节，该数据为参数b的低8位

	2、write(byte[] b) throws IOException //将一个字节类型的数组写入输出流

	3、write(byte[] b , int offset , int length) // 将一个字节类型的数组从指定位置开始，写入到输出流

	4、close() throws IOException //关闭流释放资源

	5、flush() throws IOException //将输出流中缓冲的数据全部写出到目的地

5、Reader流学习

	Reader流和InputStream一样，只不过读取的单位不同，数据单位为字符（16bit）

				BufferedReader ----> LineNumberReader

				CharArrayReader
	Reader---->
				InputStreamReader ----> FileReader

				FilterReader ------> PushbackReader

				PipedReader

				StringReader


	基本方法：

	1、int read() throws IOException // 读取一个字符并以整数的形式返回，末尾返回-1

	2、int read(char[] char) throws IOException // 读取一系列字符并存储到buffer，返回实际读取的字符数，末尾返回-1

	3、int read(char[] char , int offset , int length) throws IOException //读取length个字符并存储到一个数组buffer，返回实际读取的字符数，末尾返回-1

	4、void close() throws IOException //关闭流释放资源

	5、long skip（long n） throws IOException // 跳过n个字符不读，返回实际跳过的字符数

6、Writer流

	用于从程序中往外输出数据，数据单位为16bit，一个字符

			BufferedWriter

			CharArrayWriter
	Writer
			OutputStreamWriter ---> FileWriter

			FilterWriter

			PipedWriter

			StringWriter

			PrintWriter

	基本方法：

	1、void write(int c) throws IOException //向输出流中写入一个字符数据，该字符数据为b的低16位

	2、void write(char[] char) throws IOException //将一个字符类型的数组写入到输出流中国

	3、void write(char[] char , int offset , int length) throws IOException //从指定位置将一个字符数组中的length个字符写入到输出流

	4、void write(String str) throws IOException //将一个字符串的字符写入到输出流

	5、void write(String str , int offset , int length) throws IOException //从偏移位将一个字符的length个字符写入到输出流

	6、void close() throws IOException //关闭流并释放内存资源

	7、void flush() throws IOException //将输出流中缓冲的数据全部刷新到目的地

7、处理流之---缓冲流

	缓冲流包含四种：

	BufferedInputStream(InputStream in)

	BufferedInputStream(InputStream in , int sz) //sz为自定义缓冲区大小

	BufferedOutputStream(OutputStream out)

	BufferedOutputStream(OutputStream out , int sz)

	BufferedReader(Reader reader)

	BufferedReader(Reader reader , int sz)

	BufferedWriter(Writer writer)

	BufferedWriter(Writer writer , int sz)

	之所以有处理流，就是为了避免io频率过大，刷写磁盘的次数过多会对磁盘造成损坏，因此每次在通过节点流这根管道连接到数据源读取数据后先放到小桶中，当桶里的水满了之后再一次性倒到程序中（由程序分配的内存中），或倒到文件中，总之处理流的存在是为了减少io影响，同时由于io速度过慢，按小桶进行倒水可以加快速度。

	说明：BufferedReader和BufferedWriter中包含按行读取数据的readLine()和按行写出的writeLine(),而BufferedInputStream和BufferedOutputStream中没有按行读取、写入的方法。

8、处理流之---转换流

	InputStreamReader(InputStream in)

	OutputStreamWriter(OutputStream out)

	转换流用于字节数据到字符数据之间的转换了，其中InputStreamReader需要和InputStream进行“套接”，OutputStreamWriter需要和OutputStream进行“套接”，转换流在构造时可以指定编码集合。

	字节流				字符流

	InputStream ----->  Reader

	OutputStream ---->  Writer

9、处理流之---数据流

	DataInputStream(InputSteam in)

	DataOutputSteam(OutputStream out)

	这两个处理流主要是提供了可以存取Java原始数据的方法（int，double等）

10、处理流之---打印流

	Printwriter(Writer out)

	PrintWriter(Writer out , boolean autoFlush)

	PrintWriter(OutputStream out)

	PrintWriter(OutputSteam out , boolean autoFlush)

	PrintStream(OutputStream out)

	PrintStream(OutputStream out , boolean autoFlush)

	PrintWriter和PrintStream都属于输出流，分别针对字符和字节

	说明：默认情况下系统输出的打印流是连接DOS窗口，可以通过设置System.setOut()进行更改，比如将输出流设置到日志文件。

11、处理流之---对象流

	ObjectInputStream(InputStream in)

	ObjectOutputStream(OutputStream out)

	这两个类是用来专门处理Object的，读取和写入ObjectObjectOutputStream中writeObject(对象实例)把一个对象写入
	ObjectInputStream中readObject()用来获得对象，会抛出FileNotFoundException和IOException

java输入流和输出流

1、字节输入流： 

			InputStream ---->   ByteArrayInputStream : 把字节数组转化为输入流 

						  		FileInputStream ： 文件输入流，从文件中读取数据
						  
						  		PipedInputStream ： 从一个管道输出流中读取数据，通常由一个线程向管道输出流中 写数据，另一个线程从管道输入流中读取数据，两个线程可以用管道进行通信

						  		SequenceInputStream ： 将几个输入流串联在一起，合并为一个输入流

						  		ObjectInputStream ： 

						  		FilterInputStream       ---->    BufferedInputStream ： 利用缓冲区来提高读效率

						  										 DataInputStream ： 按照与平台无关的方式从流中读取基本类型（int、char、long）的数据

						  										 PushbackInputStream ： 有一个后推缓冲区，用于存放已经读入的当前字节。


2、字节输出流：

		OutputStream  ----->   ByteArrayOutputStream : 向字节数组中写数据

							   FileOutputStream : 向文件中写数据

							   PipedOutputStream ： 向管道中输出数据，与PipedInputStream搭配使用

							   ObjectOutputStream ： 对象输出流

							   FilterOutputStream   ---->    BufferedOutputStream ： 利用缓冲区来提高写效率

							   								 DataOutputStream ： 与DataInputStream搭配使用，可以按照与平台无关的方式向流中写基本类型（int、char、long等）的数据

							   								 PrintStream ： 输出格式化的数据


  【注意：为了保证BufferedOutputStream会把缓冲区中的数据写入到文件中，一种办法是调用flush()方法，该方法立即执行一次把缓冲区的数据写到输出流中的操作，例如：outer.flush()；还有一种方法是在执行完输出流的所有writer()方法后，关闭所有输出流。过滤输出流的close()的方法会先调用本身，以及被装饰的输出流的flush()方法，这样会保证加入过滤流本身或者被装饰的流带有缓冲区，那么缓冲区的数据会被写入到数据汇中，例如：out.close()】						




3、字符输入流：

		Reader  ---->   CharArrayReader ： 从内存中的字符数组中读取字符

						BufferedReader ： 带有缓冲区，装饰其他Reader ---> LineNumberReader

						StringReader ： 把字符串类型转化为Reader类型，使程序能够对字符串进行读操作

						PipedReader : 连接一个PipedWriter

						FilterReader  ---> PushBackReader

						InputStreamReader ： 把InputStream类型转化为Reader类型，可以指定数据源的字符编码

											------>  FileReader : 是InputStreamReader的一个子类，按照本地平台的字符编码从文件中读取数据，用户不能指定其他字符编码类型；


4、字符输出流：

		Writer ----->    CharArrayWriter : 把字符写到内存中的字符数组中

						 BufferedWriter : 带有缓冲区的字符输出流

						 StringWriter : 

						 PipedWriter :

						 FilterWriter :

						 PrintWriter :

						 OutputStreamWriter : 适配器，把OutputStream转化为Writer ， 可以指定数据汇的字符编码

						 					----->  FileWriter , 是OutputStreamWriter的一个子类，向文件中写字符，按照本地平台的字符编码向文件中写数据，用户不能指定其他字符编码类型；


【注意：BufferedReader中有一个readLine()方法，而BufferedWriter中没有writeLine()方法。如果要输出一行字符串，应该再用PrintWriter来装饰BufferedWriter，PrintWriter的println(String s) 方法可以输出一行字符串】

