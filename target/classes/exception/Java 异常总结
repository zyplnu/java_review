1、Java异常：运行期间如果发生异常事件会产生一个异常类对象，该对象封装了异常事件的信息并提交给Java运行时系统，（Java运行时系统默认打印异常对象里包装的信息），这个过程称为抛出（throw）异常。当Java运行时异常接收到异常对象时，会寻找能处理这一异常的代码并把当前异常对象交给其处理，这个过程称为捕获（catch）异常。

2、异常的分类

				Throwable
				  /    \
				   /  \
	（系统错误）Error    Exception（所有异常类的父类，是可以处理的错误）
			   /           /   \
			  xxx         xxx  RuntimeException （运行时异常，可以处理也可以不处理）
			  xxx 		  xxx           \
			  			 (必须被处理)     \
			  					         xxx
			  					         xxx
			  					         xxx

   说明： Error：错误，由Java虚拟机产生并抛出，包括动态链接失败、虚拟机错误等，程序不对其处理

   		 Exception：所有异常类的父类，其子类对应了各种各样的异常类事件，一般需要用户需要显式的声明和捕获

   		 RuntimeException：一类特殊的异常，包含被0整除、数组越界等，其产生比较频繁，处理麻烦，如果显式的声明或捕获将会对系统的可读性和运行效率影响很大。因此由系统自动检测并将它们交给缺省的异常处理程序

3、异常处理的5个关键字

	3-1 try：写出可能会抛出异常的语句，对应相应的catch块去处理（只会对应一个catch块），最后执行finally，如果try代码块中的语句没有抛出错误，则catch语句块不会被执行。

	3-2 catch：封装了异常对象的一些信息，可以通过一些方法进行调用

				getMessage():用来得到一些异常事件的信息

				printStackTrace():用来输出异常事件的堆栈信息，包含了getMessage()的打印出来的信息

	3-3 finally:为异常处理提供一个统一的出口，通常用于资源清理工作：删除临时文件、关闭io流、关闭打开的文件

	3-4 throw：在方法体中，可以手动抛出异常，使用throw关键字

	3-5 throws：在方法头部，对外抛出异常，告诉其他程序如果调用需要抛出异常	  					       

	【注意：在异常捕获模块，基类异常不可以在子类异常捕获代码块的上面，否则会出现编译错误】

4、声明并抛出异常

	【子类在重写父类抛出异常的方法时，要么不抛出异常，要么抛出与父类方法相同的异常或该异常的子类。如果被重写的父类方法只抛出受检异常，则子类重写的方法可以抛出非受检异常。】

	【子类在重写父类抛出异常的方法时，如果实现了有相同方法签名的接口且接口中的该方法也有异常声明，则子类重写的方法要么不抛出异常，要么抛出父类中被重写方法声明异常与接口中被实现方法声明异常的交集。】

5、手动抛出异常：

	如果在方法体内，需要手动抛出检查型异常，则在抛出之后，必须在方法头上进行再次抛出throws该异常。